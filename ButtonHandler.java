package com.example.minecraftdiscordreports;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.entities.MessageEmbed;
import net.dv8tion.jda.api.events.interaction.component.ButtonInteractionEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.interactions.components.ActionRow;
import net.dv8tion.jda.api.interactions.components.buttons.Button;
import net.dv8tion.jda.api.entities.emoji.Emoji;
import org.jetbrains.annotations.NotNull;
import java.awt.Color;
import java.util.Collections;

public class ButtonHandler extends ListenerAdapter {
    private final Main plugin;
    private final ReportManager reportManager;
    private final ConfigManager configManager;

    public ButtonHandler(Main plugin, ReportManager reportManager, ConfigManager configManager) {
        this.plugin = plugin;
        this.reportManager = reportManager;
        this.configManager = configManager;
    }

    @Override
    public void onButtonInteraction(@NotNull ButtonInteractionEvent event) {
        String[] buttonData = event.getButton().getId().split(":");
        String action = buttonData[0];
        String reporter = buttonData[1];
        String target = buttonData[2];

        MessageEmbed originalEmbed = event.getMessage().getEmbeds().get(0);
        EmbedBuilder embed = new EmbedBuilder(originalEmbed);
        String moderatorTag = event.getUser().getAsTag();

        switch (action) {
            case "accept":
                handleAccept(event, embed, reporter, target, moderatorTag);
                break;

            case "deny":
                handleDeny(event, embed, reporter, target, moderatorTag);
                break;

            case "approve":
                handleApprove(event, embed, reporter, target, moderatorTag);
                break;

            case "mute":
            case "ban":
                handlePunishment(event, action, reporter, target, moderatorTag);
                break;
        }
    }

    private void handleAccept(ButtonInteractionEvent event, EmbedBuilder embed, String reporter, String target, String moderatorTag) {
        embed.getFields().set(3, new MessageEmbed.Field("–°—Ç–∞—Ç—É—Å", "–í –ø—Ä–æ—Ü–µ—Å—Å–µ", true));
        embed.getFields().set(4, new MessageEmbed.Field("–ü—Ä–∏–Ω—è—Ç–æ", moderatorTag, true));
        embed.setColor(configManager.getProgressColor());

        // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–∫–∞–∑–∞–Ω–∏–π
        ActionRow punishmentButtons = ActionRow.of(
                Button.secondary("mute:" + reporter + ":" + target + ":" + moderatorTag, "–ú—É—Ç")
                        .withEmoji(Emoji.fromUnicode("üîá")),
                Button.danger("ban:" + reporter + ":" + target + ":" + moderatorTag, "–ë–∞–Ω")
                        .withEmoji(Emoji.fromUnicode("üî®")),
                Button.primary("approve:" + reporter + ":" + target + ":" + moderatorTag, "–¢–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–∏—Ç—å")
                        .withEmoji(Emoji.fromUnicode("‚úÖ"))
        );

        event.editMessageEmbeds(embed.build())
                .setComponents(punishmentButtons)
                .queue();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        plugin.getDiscordBot().notifyPlayer(reporter, configManager.getInProgressMessage(moderatorTag));
    }

    private void handleDeny(ButtonInteractionEvent event, EmbedBuilder embed, String reporter, String target, String moderatorTag) {
        embed.getFields().set(3, new MessageEmbed.Field("–°—Ç–∞—Ç—É—Å", "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", true));
        embed.getFields().set(4, new MessageEmbed.Field("–ü—Ä–∏–Ω—è—Ç–æ", moderatorTag, true));
        embed.setColor(configManager.getDeniedColor());

        event.editMessageEmbeds(embed.build())
                .setComponents(Collections.emptyList())
                .queue();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        plugin.getDiscordBot().notifyPlayer(reporter, configManager.getDeniedMessage(moderatorTag));
    }

    private void handleApprove(ButtonInteractionEvent event, EmbedBuilder embed, String reporter, String target, String moderatorTag) {
        embed.getFields().set(3, new MessageEmbed.Field("–°—Ç–∞—Ç—É—Å", "–û–¥–æ–±—Ä–µ–Ω–æ", true));
        embed.getFields().set(4, new MessageEmbed.Field("–ü—Ä–∏–Ω—è—Ç–æ", moderatorTag, true));
        embed.setColor(configManager.getApprovedColor());

        event.editMessageEmbeds(embed.build())
                .setComponents(Collections.emptyList())
                .queue();

        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É
        plugin.getDiscordBot().notifyPlayer(reporter, configManager.getApprovedMessage(moderatorTag));
    }

    private void handlePunishment(ButtonInteractionEvent event, String action, String reporter, String target, String moderatorTag) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        event.getUser().openPrivateChannel().queue(channel -> {
            channel.sendMessage("**–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–∫–∞–∑–∞–Ω–∏—è:**\n" +
                    "–§–æ—Ä–º–∞—Ç: `[–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]`\n" +
                    "–ü—Ä–∏–º–µ—Ä: `30m –ö–∞–ø—Å`\n" +
                    "–ù–∞–∫–∞–∑–∞–Ω–∏–µ: " + (action.equals("mute") ? "–º—É—Ç" : "–±–∞–Ω") + " –¥–ª—è " + target +
                    "\n\n*–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç –∏–º–µ–Ω–∏ –∫–æ–Ω—Å–æ–ª–∏*").queue();
        });

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        plugin.getPunishmentManager().setPendingPunishment(
                event.getUser().getId(),
                action,
                target,
                moderatorTag
        );

        event.reply("‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
                .setEphemeral(true)
                .queue();
    }
}